package ${aptFileCompiler.getPackageName()};

import com.easy.query.core.expression.parser.core.available.TableAvailable;
import com.easy.query.core.proxy.AbstractProxyEntity;
import com.easy.query.core.proxy.SQLColumn;
import com.easy.query.core.proxy.SQLSelectAsExpression;
import com.easy.query.core.proxy.fetcher.AbstractFetcher;
import com.easy.query.core.proxy.core.EntitySQLContext;
#foreach($imp in ${aptFileCompiler.getImports()})
    ${imp}
#end

/**
 * this file automatically generated by easy-query, don't modify it
 * 当前文件是easy-query自动生成的请不要随意修改
 * 如果出现属性冲突请使用@ProxyProperty进行重命名
 *
 * @author easy-query
 */
public class ${aptFileCompiler.getEntityClassProxyName()} extends AbstractProxyEntity<${aptFileCompiler.getEntityClassProxyName()}, ${aptFileCompiler.getEntityClassName()}>{

#macro(renderPropertyUI $valueObject)
    #foreach($property in $valueObject.getProperties())
        ${property.comment}
            *{@link ${property.getOwner()}#${property.getPropertyNameGetMethodName()}}
            */
        #if(${property.isValueObject()})
        public ${property.getEntityName()}Proxy ${property.getProxyPropertyName()}(){
                return getValueObject(new ${property.getEntityName()}Proxy(getEntitySQLContext(),getTable(),getValueProperty("${property.getPropertyName()}")));
                }
        #else
            #if(${property.isIncludeAndHasNavgateProxyName()})
                #if(${property.isIncludeManyProperty()})
                public SQLQueryable<${property.getNavigateProxyName()},${property.getPropertyType()}> ${property.getProxyPropertyName()}(){
                        return getNavigates("${property.getPropertyName()}",new ${property.getNavigateProxyName()}());
                        }
                #else
                public ${property.getNavigateProxyName()} ${property.getProxyPropertyName()}(){
                        return getNavigate("${property.getPropertyName()}",new ${property.getNavigateProxyName()}());
                        }
                #end
            #else
            public ${property.getSqlColumn()}<${aptFileCompiler.getEntityClassProxyName()},${property.getPropertyType()}> ${property.getProxyPropertyName()}(){
                    return ${property.getSqlColumnMethod()}("${property.getPropertyName()}",${property.getPropertyTypeClass()});
                    }
            #end
        #end

    #end
#end
private static final Class<${aptFileCompiler.getEntityClassName()}> entityClass= ${aptFileCompiler.getEntityClassName()}.class;

public static ${aptFileCompiler.getEntityClassProxyName()} createTable(){
        return new ${aptFileCompiler.getEntityClassProxyName()}();
        }

public ${aptFileCompiler.getEntityClassProxyName()}(){
        }

#renderPropertyUI($aptValueObjectInfo)

@Override
public Class<${aptFileCompiler.getEntityClassName()}> getEntityClass(){
        return entityClass;
        }
#macro(renderValueObjectUI $valueObjectParent)
    #foreach($valueObject in $valueObjectParent.getChildren())

    public static class ${valueObject.getEntityName()}Proxy extends AbstractValueObjectProxyEntity<${aptFileCompiler.getEntityClassProxyName()}, ${valueObject.getEntityName()}> {

        private ${valueObject.getEntityName()}Proxy(EntitySQLContext entitySQLContext, TableAvailable table, String propertyName) {
            super(entitySQLContext, table, propertyName);
        }

        #renderPropertyUI($valueObject)

        #renderValueObjectUI($valueObject)
    }
    #end
#end

#renderValueObjectUI($aptValueObjectInfo)


/**
* 数据库列的简单获取
* @return
*/
public ${aptFileCompiler.getSelectorInfo().getName()} FETCHER=new ${aptFileCompiler.getSelectorInfo().getName()}(this,null,SQLSelectAsExpression.empty);


public static class ${aptFileCompiler.getSelectorInfo().getName()} extends AbstractFetcher<${aptFileCompiler.getEntityClassProxyName()}, ${aptFileCompiler.getEntityClassName()}, ${aptFileCompiler.getSelectorInfo().getName()}> {

public ${aptFileCompiler.getSelectorInfo().getName()}(${aptFileCompiler.getEntityClassProxyName()} proxy, ${aptFileCompiler.getSelectorInfo().getName()} prev,SQLSelectAsExpression sqlSelectAsExpression){
        super(proxy,prev,sqlSelectAsExpression);
        }


#foreach($property in ${aptFileCompiler.getSelectorInfo().getProperties()})
    ${property.getComment()}
        *{@link ${aptFileCompiler.getEntityClassName()}#${property.getPropertyNameGetMethodName()}}
        */
public ${aptFileCompiler.getSelectorInfo().getName()} ${property.getProxyPropertyName()}(){
        return add(getProxy().${property.getProxyPropertyName()}());
        }

#end

@Override
protected ${aptFileCompiler.getSelectorInfo().getName()} createFetcher(${aptFileCompiler.getEntityClassProxyName()} cp,AbstractFetcher<${aptFileCompiler.getEntityClassProxyName()}, ${aptFileCompiler.getEntityClassName()}, ${aptFileCompiler.getSelectorInfo().getName()}> prev,SQLSelectAsExpression sqlSelectExpression){
        return new ${aptFileCompiler.getSelectorInfo().getName()}(cp,this,sqlSelectExpression);
        }
        }

        }
