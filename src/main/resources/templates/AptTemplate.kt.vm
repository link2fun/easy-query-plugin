package ${aptFileCompiler.getPackageName()};

import com.easy.query.core.expression.parser.core.available.TableAvailable;
import com.easy.query.core.proxy.AbstractProxyEntity;
import com.easy.query.core.proxy.SQLColumn;
import com.easy.query.core.proxy.SQLSelectAsExpression;
import com.easy.query.core.proxy.fetcher.AbstractFetcher;
#foreach($imp in ${aptFileCompiler.getImports()})
${imp}
#end

/**
 * this file automatically generated by easy-query, don't modify it
 * 当前文件是easy-query自动生成的请不要随意修改
 *
 * @author xuejiaming
 */
class ${aptFileCompiler.getEntityClassProxyName()} : AbstractProxyEntity<${aptFileCompiler.getEntityClassProxyName()}, ${aptFileCompiler.getEntityClassName()}>{

#macro(renderPropertyUI $valueObject)
#foreach($property in $valueObject.getProperties())
    ${property.comment}
    * {@link ${property.getOwner()}#${property.propertyName}}
    */
    #if(${property.isValueObject()})
    fun ${property.getPropertyName()}(): ${property.getEntityName()}Proxy {
        return getValueObject(${property.getEntityName()}Proxy(getEntitySQLContext(), getTable(), getValueProperty("${property.getPropertyName()}")))
    }
    #else
    fun ${property.getPropertyName()}(): ${property.getSqlColumn()}<${aptFileCompiler.getEntityClassProxyName()},${property.getPropertyType()}> {
        return get("${property.getPropertyName()}"${property.getIncludePlaceholder()})
    }
    #end

#end
#end

    companion object {
        private val entityClass: Class<${aptFileCompiler.getEntityClassName()}> = ${aptFileCompiler.getEntityClassName()}::class.java

       fun createTable(): ${aptFileCompiler.getEntityClassProxyName()} {
           return ${aptFileCompiler.getEntityClassProxyName()}()
       }
    }
    override fun getEntityClass(): Class<${aptFileCompiler.getEntityClassName()}> {
       return entityClass
    }

    #renderPropertyUI($aptValueObjectInfo)

#macro(renderValueObjectUI $valueObjectParent)
#foreach($valueObject in $valueObjectParent.getChildren())

    class ${valueObject.getEntityName()}Proxy(entitySQLContext: EntitySQLContext, table: TableAvailable, propertyName: String) :
        AbstractValueObjectProxyEntity<${aptFileCompiler.getEntityClassProxyName()}, ${valueObject.getEntityName()}>(entitySQLContext, table, propertyName) {


        #renderPropertyUI($valueObject)

        #renderValueObjectUI($valueObject)
    }
#end
#end

    #renderValueObjectUI($aptValueObjectInfo)


    /**
    * 数据库列的简单获取
    * @return
    */
    val FETCHER: ${aptFileCompiler.getSelectorInfo().getName()} = ${aptFileCompiler.getSelectorInfo().getName()}(this, null, SQLSelectAsExpression.empty)


    class ${aptFileCompiler.getSelectorInfo().getName()} (proxy: ${aptFileCompiler.getEntityClassProxyName()}, prev: ${aptFileCompiler.getSelectorInfo().getName()}?, sqlSelectAsExpression: SQLSelectAsExpression) :
        extends AbstractFetcher<${aptFileCompiler.getEntityClassProxyName()}, ${aptFileCompiler.getEntityClassName()}, ${aptFileCompiler.getSelectorInfo().getName()}>(proxy, prev, sqlSelectAsExpression) {



#foreach($property in ${aptFileCompiler.getSelectorInfo().getProperties()})
    ${property.getComment()}
        * {@link ${aptFileCompiler.getEntityClassName()}#${property.getPropertyName()}}
        */
        fun ${property.getPropertyName()}(): ${aptFileCompiler.getSelectorInfo().getName()} {
            return add(getProxy().${property.getPropertyName()}())
        }

#end


        override fun createFetcher(
            cp: ${aptFileCompiler.getEntityClassProxyName()},
            prev: AbstractFetcher<${aptFileCompiler.getEntityClassProxyName()}, ${aptFileCompiler.getEntityClassName()}, ${aptFileCompiler.getSelectorInfo().getName()}>,
            sqlSelectExpression: SQLSelectAsExpression
        ): ${aptFileCompiler.getSelectorInfo().getName()} {
            return ${aptFileCompiler.getSelectorInfo().getName()}(cp, this, sqlSelectExpression)
        }
}

}
