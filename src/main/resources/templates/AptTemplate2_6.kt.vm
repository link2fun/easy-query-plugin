package ${aptFileCompiler.getPackageName()};

import com.easy.query.core.expression.parser.core.available.TableAvailable;
import com.easy.query.core.proxy.AbstractProxyEntity;
import com.easy.query.core.proxy.SQLColumn;
import com.easy.query.core.proxy.SQLSelectAsExpression;
import com.easy.query.core.proxy.fetcher.AbstractFetcher;
import com.easy.query.core.proxy.core.EntitySQLContext;
#foreach($imp in ${aptFileCompiler.getImports()})
    ${imp}
#end

/**
 * this file automatically generated by easy-query, don't modify it
 * 当前文件是easy-query自动生成的请不要随意修改
 * 如果出现属性冲突请使用@ProxyProperty进行重命名
 *
 * @author easy-query
 */
class ${aptFileCompiler.getEntityClassProxyName()} extends AbstractProxyEntity<${aptFileCompiler.getEntityClassProxyName()}, ${aptFileCompiler.getEntityClassName()}>() {

    #macro(renderPropertyUI $valueObject)
        #foreach($property in $valueObject.getProperties())
            ${property.comment}
            *{@link ${property.getOwner()}#${property.getPropertyNameGetMethodName()}}
            */
            #if(${property.isValueObject()})
                fun ${property.getProxyPropertyName()}(): ${property.getEntityName()}Proxy {
                    return getValueObject(new ${property.getEntityName()}Proxy(getEntitySQLContext(),getTable(),getValueProperty("${property.getPropertyName()}")))
                }
            #else
                #if(${property.isIncludeAndHasNavigateProxyName()})
                    #if(${property.isIncludeManyProperty()})
                    fun ${property.getProxyPropertyName()}(): SQLManyQueryable<${aptFileCompiler.getEntityClassProxyName()},${property.getNavigateProxyName()},${property.getPropertyType()}> {
                        return getNavigateMany("${property.getPropertyName()}",new ${property.getNavigateProxyName()}())
                    }
                    #else
                        fun ${property.getProxyPropertyName()}(): ${property.getNavigateProxyName()} {
                            return getNavigate("${property.getPropertyName()}",new ${property.getNavigateProxyName()}())
                        }
                    #end
                #else
                    #if(${property.isAnyType()})
                        fun ${property.getProxyPropertyName()}(): ${property.getSqlColumn()}<${aptFileCompiler.getEntityClassProxyName()},${property.getPropertyType()}> {
                            return ${property.getSqlColumnMethod()}("${property.getPropertyName()}",${property.getPropertyTypeClass()})
                        }

                    #else
                        fun ${property.getProxyPropertyName()}(): ${property.getSqlColumn()}<${aptFileCompiler.getEntityClassProxyName()}> {
                            return ${property.getSqlColumnMethod()}("${property.getPropertyName()}")
                        }
                    #end
                #end
            #end

        #end
    #end

    companion object {
        @JvmStatic
        private val entityClass = ${aptFileCompiler.getEntityClassName()}::class.java
        @JvmStatic
        val TABLE: ${aptFileCompiler.getEntityClassProxyName()} = createTable().createEmpty()
        @JvmStatic
        fun createTable() = ${aptFileCompiler.getEntityClassProxyName()}()
    }


    #renderPropertyUI($aptValueObjectInfo)

    @Override
    override fun getEntityClass() = Companion.entityClass

    #macro(renderValueObjectUI $valueObjectParent)
        #foreach($valueObject in $valueObjectParent.getChildren())

            class ${valueObject.getEntityName()}Proxy extends AbstractValueObjectProxyEntity<${aptFileCompiler.getEntityClassProxyName()}, ${valueObject.getEntityName()}>(entitySQLContext,table, propertyName) {

                #renderPropertyUI($valueObject)

                #renderValueObjectUI($valueObject)
            }
        #end
    #end

    #renderValueObjectUI($aptValueObjectInfo)


    /**
     * 数据库列的简单获取
     * @return
     */
    val FETCHER=${aptFileCompiler.getSelectorInfo().getName()}(this,null,SQLSelectAsExpression.empty)


    class ${aptFileCompiler.getSelectorInfo().getName()}(proxy: ${aptFileCompiler.getEntityClassProxyName()}, prev: ${aptFileCompiler.getSelectorInfo().getName()}?, sqlSelectAsExpression: SQLSelectAsExpression) extends AbstractFetcher<${aptFileCompiler.getEntityClassProxyName()}, ${aptFileCompiler.getEntityClassName()}, ${aptFileCompiler.getSelectorInfo().getName()}>(proxy, prev, sqlSelectAsExpression) {


        #foreach($property in ${aptFileCompiler.getSelectorInfo().getProperties()})
            ${property.getComment()}
            *{@link ${aptFileCompiler.getEntityClassName()}#${property.getPropertyNameGetMethodName()}}
            */
            fun ${property.getProxyPropertyName()}(): ${aptFileCompiler.getSelectorInfo().getName()} {
                return add(getProxy().${property.getProxyPropertyName()}())
            }

        #end

        override fun createFetcher(cp:${aptFileCompiler.getEntityClassProxyName()},prev:AbstractFetcher<${aptFileCompiler.getEntityClassProxyName()}, ${aptFileCompiler.getEntityClassName()}, ${aptFileCompiler.getSelectorInfo().getName()}>,sqlSelectExpression: SQLSelectAsExpression): ${aptFileCompiler.getSelectorInfo().getName()} {
            return ${aptFileCompiler.getSelectorInfo().getName()}(cp,this,sqlSelectExpression)
        }
    }


    object Fields {
        #foreach($property in ${aptFileCompiler.getSelectorInfo().getProperties()})
            const val ${property.getProxyPropertyName()} = "${property.getProxyPropertyName()}"
        #end
    }
}
